/**
 * 🌐 Cluster Example (Only /generate-report)
 *
 * This version forks multiple worker processes using Node's `cluster` module.
 * Each worker handles requests independently, allowing parallel CPU-bound work.
 *
 * ✅ Requests to /generate-report are distributed across workers.
 * This avoids blocking the main process and utilizes multiple CPU cores.
 */

const cluster = require("cluster");
const os = require("os");
const express = require("express");
const process = require("process");

const PORT = 3000;
const cpuCount = os.cpus().length;

if (cluster.isPrimary) {
  console.log(`🧠 Master process started. PID: ${process.pid}`);
  console.log(`💻 Spawning ${cpuCount} workers (1 per CPU core)`);

  // Fork one worker per CPU core
  for (let i = 0; i < cpuCount; i++) {
    cluster.fork();
  }

  cluster.on("exit", worker => {
    console.log(`❌ Worker ${worker.process.pid} exited. Restarting...`);
    cluster.fork();
  });
} else {
  const app = express();
  const workerId = cluster.worker?.id || "unknown";

  console.log(`🔧 Worker ${process.pid} (ID: ${workerId}) started`);

  // 🧪 Heavy CPU-bound task
  app.get("/generate-report", (req, res) => {
    console.log(`📄 [/generate-report] Handled by worker ${process.pid} (ID: ${workerId})`);
    let total = 0;
    for (let i = 0; i < 1e5; i++) {
      for (let j = 0; j < 1e4; j++) {
        total += Math.sin(i) * Math.tan(j) * 0.0000001;
      }
    }
    res.send(`📄 Report generated by worker ${process.pid} (ID: ${workerId}): ${total.toFixed(2)}`);
    console.log(`📄 Report generated by PID ${process.pid}: ${total.toFixed(2)}`);
  });

  app.listen(PORT, () => {
    console.log(`🚀 Worker ${process.pid} listening at http://localhost:${PORT}`);
  });
}

/**
 * 🔁 Flow:
 * 1. Master forks multiple workers, one per CPU core.
 * 2. Each worker hosts the Express app and listens on the same port.
 * 3. OS distributes incoming connections across workers.
 * 4. Each request to /generate-report runs in its own process.
 *
 * ✅ This avoids blocking and achieves real parallelism.
 */
