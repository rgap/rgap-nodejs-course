└── ./
    └── index.js
    └── package.json
    └── src/
        └── swagger.json
        └── app.js
        └── middlewares/
            └── authMiddleware.js
        └── routes/
            └── productRoutes.js
            └── userRoutes.js

Contents of index.js:

import app from "./src/app.js";

const PORT = process.env.PORT || 3000;

// Start the Express server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
  console.log(`Swagger UI is available on http://localhost:${PORT}/api-docs`);
});


Contents of package.json:

{
  "name": "20_",
  "version": "1.0.0",
  "description": "",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.19.2",
    "swagger-ui-express": "^5.0.1"
  }
}


Contents of src/swagger.json:

{
  "swagger": "2.0",
  "info": {
    "title": "User and Product API",
    "version": "1.0.0",
    "description": "API to manage users and products"
  },
  "paths": {
    "/api/v1/users": {
      "get": {
        "summary": "Returns a list of users",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "summary": "Returns a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "The user ID"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your bearer token in the format **Bearer <token>**"
    }
  }
}


Contents of src/app.js:

import express from "express";
import swaggerUi from "swagger-ui-express";
import authMiddleware from "./middlewares/authMiddleware.js";
import productRoutes from "./routes/productRoutes.js";
import userRoutes from "./routes/userRoutes.js";
import swaggerDocument from "./swagger.json" assert { type: "json" };

const app = express();

// Apply the auth middleware globally (optional)
app.use(authMiddleware);

// Serve Swagger UI at /api-docs
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Use user routes
app.use("/api/v1/users", userRoutes);

// Use product routes
app.use("/api/v1/products", productRoutes);

export default app;


Contents of src/middlewares/authMiddleware.js:

export default function authMiddleware(req, res, next) {
  const authHeader = req.headers["authorization"];

  if (authHeader && authHeader === "Bearer valid-token") {
    // Continue to the next middleware or route handler
    next();
  } else {
    // Respond with an unauthorized status
    res.status(401).json({ message: "Unauthorized" });
  }
}


Contents of src/routes/productRoutes.js:

import express from "express";

const router = express.Router();

// Route to get product list
router.get("/", (req, res) => {
  res.json([
    { id: 1, name: "Product A" },
    { id: 2, name: "Product B" },
  ]);
});

// Route to get a specific product by ID
router.get("/:id", (req, res) => {
  const productId = parseInt(req.params.id, 10);
  res.json({ id: productId, name: `Product ${productId}` });
});

export default router;


Contents of src/routes/userRoutes.js:

import express from "express";

const router = express.Router();

// Route to get user list
router.get("/", (req, res) => {
  res.json([
    { id: 1, name: "John Doe" },
    { id: 2, name: "Jane Doe" },
  ]);
});

// Route to get a specific user by ID
router.get("/:id", (req, res) => {
  const userId = parseInt(req.params.id, 10);
  res.json({ id: userId, name: `User ${userId}` });
});

export default router;


